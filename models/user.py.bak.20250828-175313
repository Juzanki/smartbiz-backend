# backend/models/user.py
# -*- coding: utf-8 -*-
from __future__ import annotations

import hashlib
import datetime as dt
from typing import Optional, TYPE_CHECKING, List

from sqlalchemy import (
    Boolean,
    CheckConstraint,
    DateTime,
    Index,
    Integer,
    String,
    func,
)
from sqlalchemy.orm import Mapped, mapped_column, relationship, validates
from sqlalchemy.event import listens_for

from backend.db import Base

if TYPE_CHECKING:
    # Type hints only — no runtime imports
    from .activity_score import ActivityScore
    from .smart_coin_wallet import SmartCoinWallet
    from .order import Order
    from .ad_earning import AdEarning
    from .ai_bot_settings import AIBotSettings
    from .audit_log import AuditLog
    from .auto_reply_training import AutoReplyTraining

    from .badge_history import BadgeHistory
    from .balance import Balance

    from .billing_log import BillingLog
    from .user_bot import UserBot
    from .chat import ChatMessage
    from .co_host import CoHost
    from .customer import Customer
    from .drone_mission import DroneMission
    from .error_log import ErrorLog
    from .gift_fly import GiftFly
    from .campaign import CampaignAffiliate
    from .live_session import LiveSession
    from .login_history import LoginHistory
    from .loyalty import LoyaltyPoint
    from .magic_link import MagicLink
    from .message_log import MessageLog
    from .notification_preferences import NotificationPreference
    from .notification import Notification
    from .payment import Payment
    from .platform_status import PlatformStatus
    from .connected_platform import ConnectedPlatform
    from .post_log import PostLog
    from .social_media_post import SocialMediaPost
    from .push_subscription import PushSubscription
    from .recharge_transaction import RechargeTransaction
    from .referral_bonus import ReferralBonus
    from .referral_log import ReferralLog
    from .scheduled_message import ScheduledMessage
    from .scheduled_task import ScheduledTask
    from .search_log import SearchLog
    from .setting import Settings
    from .setting import UserDeviceSetting, NotificationSetting, SettingsAudit
    from .smart_coin_transaction import SmartCoinTransaction
    from .subscription import UserSubscription
    from .support import SupportTicket
    from .smart_tags import Tag
    from .token_usage_log import TokenUsageLog
    from .top_contributor import TopContributor
    from .user_device import UserDevice
    from .video_comment import VideoComment
    from .video_view_stat import VideoViewStat
    from .webhook_delivery_log import WebhookDeliveryLog
    from .webhook_endpoint import WebhookEndpoint
    from .withdraw_request import WithdrawRequest
    from .guest import Guest
    from .goal import Goal
    from .leaderboard_notification import LeaderboardNotification
    from .like import Like
    from .post_live_notification import PostLiveNotification
    from .moderation_action import ModerationAction
    from .fan import Fan
    from .customer_feedback import CustomerFeedback
    # Gifts
    from .gift_movement import GiftMovement
    from .gift_transaction import GiftTransaction
    # Chat messages
    from .message import Message


class User(Base):
    """Core user model (SQLAlchemy 2.0, typed)."""
    __tablename__ = "users"
    __mapper_args__ = {"eager_defaults": True}

    # -- Identity ---------------------------------------------------------------
    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    email: Mapped[str] = mapped_column(String(255), unique=True, index=True, nullable=False)
    username: Mapped[Optional[str]] = mapped_column(String(80), index=True, default=None)
    full_name: Mapped[Optional[str]] = mapped_column(String(120), default=None)

    # -- Auth / status ----------------------------------------------------------
    hashed_password: Mapped[Optional[str]] = mapped_column(String(255), default=None)
    password_hash:  Mapped[Optional[str]] = mapped_column(String(255), default=None)
    role: Mapped[str] = mapped_column(String(32), default="user")  # user | admin | owner
    is_active:   Mapped[bool] = mapped_column(Boolean, default=True,  nullable=False)
    is_verified: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)
    subscription_status: Mapped[Optional[str]] = mapped_column(String(32), default="free")

    # -- Timestamps ------------------------------------------------------------
    created_at: Mapped[dt.datetime] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), nullable=False, index=True
    )
    updated_at: Mapped[dt.datetime] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False
    )

    __table_args__ = (
        CheckConstraint("length(email) >= 3", name="ck_user_email_len"),
        Index("ix_users_email_lower", func.lower(email)),
        Index("ix_users_username_lower", func.lower(username)),
        Index("ix_users_is_active_created", "is_active", "created_at"),
    )

    # -- One-to-one basics -----------------------------------------------------
    activity_score: Mapped[Optional["ActivityScore"]] = relationship(
        "ActivityScore", back_populates="user", uselist=False, cascade="all, delete-orphan", lazy="selectin"
    )
    ai_bot_settings: Mapped[Optional["AIBotSettings"]] = relationship(
        "AIBotSettings", back_populates="user", uselist=False, cascade="all, delete-orphan", lazy="selectin"
    )
    balance: Mapped[Optional["Balance"]] = relationship(
        "Balance", back_populates="user", uselist=False, cascade="all, delete-orphan",
        passive_deletes=True, lazy="selectin",
    )
    wallet: Mapped[Optional["SmartCoinWallet"]] = relationship(
        "SmartCoinWallet", back_populates="user", uselist=False,
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    settings: Mapped[Optional["Settings"]] = relationship(
        "Settings", back_populates="user", uselist=False,
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    notification_setting: Mapped[Optional["NotificationSetting"]] = relationship(
        "NotificationSetting", back_populates="user", uselist=False,
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    notification_preferences: Mapped[Optional["NotificationPreference"]] = relationship(
        "NotificationPreference", back_populates="user", uselist=False,
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Badges ----------------------------------------------------------------
    badge_events_received: Mapped[List["BadgeHistory"]] = relationship(
        "BadgeHistory", back_populates="user", foreign_keys="BadgeHistory.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    badge_events_given: Mapped[List["BadgeHistory"]] = relationship(
        "BadgeHistory", back_populates="awarded_by", foreign_keys="BadgeHistory.awarded_by_id",
        lazy="selectin",
    )

    @property
    def badge_history(self) -> List["BadgeHistory"]:
        events = (self.badge_events_received or []) + (self.badge_events_given or [])
        base = dt.datetime(1970, 1, 1, tzinfo=dt.timezone.utc)
        return sorted(events, key=lambda ev: getattr(ev, "awarded_at", None) or base, reverse=True)

    # -- Notifications / push --------------------------------------------------
    notifications_received: Mapped[List["Notification"]] = relationship(
        "Notification", foreign_keys="Notification.user_id", back_populates="recipient",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    notifications_sent: Mapped[List["Notification"]] = relationship(
        "Notification", foreign_keys="Notification.actor_user_id", back_populates="actor",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    push_subscriptions: Mapped[List["PushSubscription"]] = relationship(
        "PushSubscription", back_populates="user",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Guests / Co-hosts -----------------------------------------------------
    guest_entries: Mapped[List["Guest"]] = relationship(
        "Guest", primaryjoin="Guest.user_id == User.id", back_populates="user",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    guest_approvals: Mapped[List["Guest"]] = relationship(
        "Guest", primaryjoin="Guest.approved_by_user_id == User.id", back_populates="approved_by",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    co_host_as_host: Mapped[List["CoHost"]] = relationship(
        "CoHost", back_populates="host", foreign_keys="CoHost.host_user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    co_host_as_cohost: Mapped[List["CoHost"]] = relationship(
        "CoHost", back_populates="cohost", foreign_keys="CoHost.cohost_user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Live sessions ---------------------------------------------------------
    live_sessions: Mapped[List["LiveSession"]] = relationship(
        "LiveSession", back_populates="user", foreign_keys="LiveSession.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Auth / history --------------------------------------------------------
    login_history: Mapped[List["LoginHistory"]] = relationship(
        "LoginHistory", back_populates="user", foreign_keys="LoginHistory.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    magic_links: Mapped[List["MagicLink"]] = relationship(
        "MagicLink", back_populates="user", foreign_keys="MagicLink.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Chat / messages (app) ------------------------------------------------
    messages: Mapped[List["Message"]] = relationship(
        "Message", back_populates="user", foreign_keys="Message.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    message_logs: Mapped[List["MessageLog"]] = relationship(
        "MessageLog", back_populates="user", foreign_keys="MessageLog.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    scheduled_messages: Mapped[List["ScheduledMessage"]] = relationship(
        "ScheduledMessage", back_populates="user", foreign_keys="ScheduledMessage.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    scheduled_tasks: Mapped[List["ScheduledTask"]] = relationship(
        "ScheduledTask", back_populates="user", foreign_keys="ScheduledTask.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Social / Posts --------------------------------------------------------
    posts: Mapped[List["SocialMediaPost"]] = relationship(
        "SocialMediaPost", back_populates="user", foreign_keys="SocialMediaPost.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    post_logs: Mapped[List["PostLog"]] = relationship(
        "PostLog", back_populates="user", foreign_keys="PostLog.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    likes: Mapped[List["Like"]] = relationship(
        "Like", back_populates="user", foreign_keys="Like.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    video_comments: Mapped[List["VideoComment"]] = relationship(
        "VideoComment", back_populates="user", foreign_keys="VideoComment.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # ? FIX: tumia viewer_user_id kama ilivyo kwenye VideoViewStat
    view_stats: Mapped[List["VideoViewStat"]] = relationship(
        "VideoViewStat",
        back_populates="viewer",
        primaryjoin="VideoViewStat.viewer_user_id == User.id",
        foreign_keys="VideoViewStat.viewer_user_id",
        cascade="all, delete-orphan",
        passive_deletes=True,
        lazy="selectin",
    )

    # -- Commerce / payouts ----------------------------------------------------
    orders: Mapped[List["Order"]] = relationship(
        "Order", back_populates="user", foreign_keys="Order.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    payments: Mapped[List["Payment"]] = relationship(
        "Payment", back_populates="user", foreign_keys="Payment.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    recharges: Mapped[List["RechargeTransaction"]] = relationship(
        "RechargeTransaction", back_populates="user", foreign_keys="RechargeTransaction.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    withdraw_requests: Mapped[List["WithdrawRequest"]] = relationship(
        "WithdrawRequest", back_populates="user", foreign_keys="WithdrawRequest.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    withdraw_approvals: Mapped[List["WithdrawRequest"]] = relationship(
        "WithdrawRequest",
        back_populates="approved_by",
        primaryjoin="User.id == WithdrawRequest.approved_by_user_id",
        foreign_keys="WithdrawRequest.approved_by_user_id",
        lazy="selectin",
    )
    coin_transactions: Mapped[List["SmartCoinTransaction"]] = relationship(
        "SmartCoinTransaction", back_populates="user", foreign_keys="SmartCoinTransaction.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- CRM -------------------------------------------------------------------
    customers: Mapped[List["Customer"]] = relationship(
        "Customer", back_populates="user", foreign_keys="Customer.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    customer_feedbacks: Mapped[List["CustomerFeedback"]] = relationship(
        "CustomerFeedback", back_populates="user", foreign_keys="CustomerFeedback.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    feedbacks_assigned: Mapped[List["CustomerFeedback"]] = relationship(
        "CustomerFeedback", back_populates="assignee",
        foreign_keys="CustomerFeedback.assigned_to_user_id",
        passive_deletes=True, lazy="selectin",
    )

    # -- Drone / platform / devices --------------------------------------------
    drone_missions: Mapped[List["DroneMission"]] = relationship(
        "DroneMission", back_populates="user", foreign_keys="DroneMission.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    platform_statuses: Mapped[List["PlatformStatus"]] = relationship(
        "PlatformStatus", back_populates="user",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    devices: Mapped[List["UserDevice"]] = relationship(
        "UserDevice", back_populates="user", foreign_keys="UserDevice.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    device_settings: Mapped[List["UserDeviceSetting"]] = relationship(
        "UserDeviceSetting", back_populates="user", foreign_keys="UserDeviceSetting.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # ? FIX: SettingsAudit — tumia actor_user_id + back_populates="actor"
    settings_audits: Mapped[List["SettingsAudit"]] = relationship(
        "SettingsAudit",
        back_populates="actor",
        foreign_keys="SettingsAudit.actor_user_id",
        passive_deletes=True,
        lazy="selectin",
    )

    # -- Social graph (Fan) ----------------------------------------------------
    following_hosts: Mapped[List["Fan"]] = relationship(
        "Fan", back_populates="fan", foreign_keys="Fan.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    host_followers: Mapped[List["Fan"]] = relationship(
        "Fan", back_populates="host", foreign_keys="Fan.host_user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Gifts / Coins ---------------------------------------------------------
    gift_fly_events: Mapped[List["GiftFly"]] = relationship(
        "GiftFly", back_populates="user", foreign_keys="GiftFly.user_id",
        passive_deletes=True, lazy="selectin",
    )
    gift_movements_sent: Mapped[List["GiftMovement"]] = relationship(
        "GiftMovement", back_populates="sender", foreign_keys="GiftMovement.sender_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    gift_movements_received: Mapped[List["GiftMovement"]] = relationship(
        "GiftMovement", back_populates="host", foreign_keys="GiftMovement.host_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    gift_transactions_sent: Mapped[List["GiftTransaction"]] = relationship(
        "GiftTransaction", back_populates="sender", foreign_keys="GiftTransaction.sender_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    gift_transactions_received: Mapped[List["GiftTransaction"]] = relationship(
        "GiftTransaction", back_populates="recipient", foreign_keys="GiftTransaction.recipient_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Engagement / signals --------------------------------------------------
    leaderboard_notifications: Mapped[List["LeaderboardNotification"]] = relationship(
        "LeaderboardNotification", back_populates="user",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    post_live_notifications: Mapped[List["PostLiveNotification"]] = relationship(
        "PostLiveNotification", back_populates="user",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    goals: Mapped[List["Goal"]] = relationship(
        "Goal", back_populates="creator", foreign_keys="Goal.creator_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    top_contributions: Mapped[List["TopContributor"]] = relationship(
        "TopContributor", back_populates="user", foreign_keys="TopContributor.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Moderation / support --------------------------------------------------
    moderations_received: Mapped[List["ModerationAction"]] = relationship(
        "ModerationAction", back_populates="target", foreign_keys="ModerationAction.target_user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    moderations_taken: Mapped[List["ModerationAction"]] = relationship(
        "ModerationAction", back_populates="moderator", foreign_keys="ModerationAction.moderator_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    support_tickets: Mapped[List["SupportTicket"]] = relationship(
        "SupportTicket", back_populates="user", foreign_keys="SupportTicket.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Ads / earnings --------------------------------------------------------
    ad_earnings: Mapped[List["AdEarning"]] = relationship(
        "AdEarning", back_populates="user", foreign_keys="AdEarning.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Referrals -------------------------------------------------------------
    referrals: Mapped[List["ReferralLog"]] = relationship(
        "ReferralLog",
        back_populates="referrer",
        foreign_keys="ReferralLog.",
        cascade="all, delete-orphan",
        passive_deletes=True,
        lazy="selectin",
    )
    referred_logs: Mapped[List["ReferralLog"]] = relationship(
        "ReferralLog",
        back_populates="referred",
        foreign_keys="ReferralLog.",
        cascade="all, delete-orphan",
        passive_deletes=True,
        lazy="selectin",
    )
    referral_bonuses: Mapped[List["ReferralBonus"]] = relationship(
        "ReferralBonus",
        back_populates="user",
        foreign_keys="ReferralBonus.user_id",
        cascade="all, delete-orphan",
        passive_deletes=True,
        lazy="selectin",
    )

    # -- Search / telemetry / webhooks / tokens --------------------------------
    search_logs: Mapped[List["SearchLog"]] = relationship(
        "SearchLog", back_populates="user", foreign_keys="SearchLog.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    error_logs: Mapped[List["ErrorLog"]] = relationship(
        "ErrorLog", back_populates="user", foreign_keys="ErrorLog.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    token_usage_logs: Mapped[List["TokenUsageLog"]] = relationship(
        "TokenUsageLog", back_populates="user", foreign_keys="TokenUsageLog.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    webhook_endpoints: Mapped[List["WebhookEndpoint"]] = relationship(
        "WebhookEndpoint", back_populates="user", foreign_keys="WebhookEndpoint.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    webhook_delivery_logs: Mapped[List["WebhookDeliveryLog"]] = relationship(
        "WebhookDeliveryLog", back_populates="user", foreign_keys="WebhookDeliveryLog.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Subscriptions / affiliates --------------------------------------------
    subscriptions: Mapped[List["UserSubscription"]] = relationship(
        "UserSubscription", back_populates="user", foreign_keys="UserSubscription.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )
    campaign_affiliations: Mapped[List["CampaignAffiliate"]] = relationship(
        "CampaignAffiliate", back_populates="user", foreign_keys="CampaignAffiliate.user_id",
        cascade="all, delete-orphan", passive_deletes=True, lazy="selectin",
    )

    # -- Helpers ---------------------------------------------------------------
    def set_password(self, raw: str) -> None:
        try:
            from backend.utils.security import get_password_hash  # type: ignore
            h = get_password_hash(raw)
        except Exception:
            h = hashlib.sha256(raw.encode("utf-8")).hexdigest()
        self.hashed_password = h
        self.password_hash = h

    def verify_password(self, raw: str) -> bool:
        hashed = self.hashed_password or self.password_hash or ""
        if not hashed:
            return False
        try:
            from backend.utils.security import verify_password  # type: ignore
            return bool(verify_password(raw, hashed))
        except Exception:
            return hashlib.sha256(raw.encode("utf-8")).hexdigest() == hashed

    @property
    def name(self) -> str:
        return self.full_name or self.username or self.email

    @property
    def has_password(self) -> bool:
        return bool(self.hashed_password or self.password_hash)

    @property
    def is_owner(self) -> bool:
        return (self.role or "").lower() == "owner"

    @property
    def is_admin(self) -> bool:
        return (self.role or "").lower() == "admin"

    @property
    def is_staff(self) -> bool:
        return self.is_admin or self.is_owner

    def has_role(self, *roles: str) -> bool:
        r = (self.role or "").lower()
        return any(r == x.lower() for x in roles)

    def __repr__(self) -> str:  # pragma: no cover
        return f"<User id={self.id} email={self.email} role={self.role} active={self.is_active}>"


# -- Normalization: email & username lowercased --------------------------------
@validates("email")
def _validate_email_lower(cls, value: str) -> str:  # type: ignore[override]
    return (value or "").strip().lower()

@validates("username")
def _validate_username_lower(cls, value: Optional[str]) -> Optional[str]:  # type: ignore[override]
    if value is None:
        return None
    v = (value or "").strip()
    v = " ".join(v.split())
    return v.lower() or None

@listens_for(User, "before_insert")
def _user_before_insert(_mapper, _connection, target: User) -> None:
    if target.email:
        target.email = target.email.strip().lower()
    if target.username:
        target.username = " ".join(target.username.strip().split()).lower()

@listens_for(User, "before_update")
def _user_before_update(_mapper, _connection, target: User) -> None:
    if target.email:
        target.email = target.email.strip().lower()
    if target.username:
        target.username = " ".join(target.username.strip().split()).lower()
